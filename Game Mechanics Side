import java.util.Hashtable;
import java.util.List;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.Stack;

public class Structures {

public static void main(String[] args) {
	
		//Create data structures
		Set<String> discard = new HashSet<String>();
		Set<String> deck = new HashSet<String>();
		Set<String> field = new HashSet<String>();
		Set<String> hand = new HashSet<String>();
		Set<String> unknown = new HashSet<String>();
		Map<String, int[]> collection = new Hashtable<String, int[]>();
			//Integer[0] = cards seen, Integer[1] = cards currently visible
		
		//Starting card numbers (deck, hand, prizes)
		int[] cardcounts = {47,1,6};
		
		String input = "egg";
		hand.add(input);
		input = "Lysandre's Trump Card";
		discard.add(input);
		input = "Professor Juniper";
		field.add(input);
		cardcounts = returnCardToHand(hand, field, cardcounts, input);
		cardcounts = shuffleHandToDeck(hand, deck, cardcounts);
		input = "Lysandre's Trump Card";
		cardcounts[1] = retrieve(hand, discard, cardcounts, input);
		System.out.println(cardcounts[0] + " cards in deck:" + deck);
		System.out.println("cards in discard:" + discard);
		System.out.println(cardcounts[1] + " card(s) in hand:" + hand);
		System.out.println(cardcounts[2] + " prize cards remaining");
	}
	
	//Discard methods and functions
	public static int[] discardFromDeck(Set deck, Set discard, int[] count, String input, Map<String, int[]> known){
		if(deck.contains(input)){
			discard.add(deck.remove(input));
		}
		else{
			discard.add(input);
			known.put(input, known.get(input))[0] ++;
		}
		count[0]--;
		return count;
	}
	
	public static int[] discardFromHand(Set hand, Set discard, int[] count, String input){
		discard.add(input);
		hand.remove(input);
		count[1]--;
		return count;
	}
	
	public static void discardFromField(Set discard, Set field, String input){
		field.remove(input);
		discard.add(input);
	}
	
	//Adding to hand methods and functions
	public static void drawCard(Set deck, Set hand, int[]count){
		deck.clear();
		count[0]--;
		count[1]++;
	}
	
	public static int[] returnCardToHand(Set hand, Set field, int[]count, String input){
		hand.add(input);
		field.remove(input);
		count[1]++;
		return count;
	}
	
	public static int[] takePrize(Set hand, int[]count, Set unknown, String input){
		hand.add(input);
		unknown.remove(input);
		count[2]--;
		return count;
	}
	
	public static int retrieve(Set hand, Set discard, int[] count, String input){
		hand.add(input);
		discard.remove(input);
		count[1]++;
		return count[1];
	}
	
	//Shuffling to deck methods and functions
	public static int[] shuffleHandCardToDeck(Set hand, Set deck, int[] count, String input){
			deck.add(input);
			hand.remove(input);
			count[1]--;
			count[0]++;
					
		return count;
	}
	
	public static int[] shuffleHandToDeck(Set hand, Set deck, int[] count){
		while (count[1]>0){
			Object element = hand.iterator().next();
			count = shuffleHandCardToDeck(hand, deck, count, element.toString());
		}
		return count;
	}
	
	public static int[] shuffleGraveyardToDeck(Set discard, Set deck, int[] count){
		while (discard.size()>0){
			Object element = discard.iterator().next();
			if (element.toString()!="Lysandre's Trump Card"){
					count = shuffleDiscardToDeck(discard, deck, count, element.toString());
			}
		}
		return count;
	}
	
	public static int[] shuffleDiscardToDeck(Set discard, Set deck, int[] count, String input){
					deck.add(input);
					discard.remove(input);
					count[0]++;
		return count;
	}
	
	public static int[] shuffleCardIntoDeck(Set field, Set deck, int[]count, String input){
		deck.add(input);
		field.remove(input);
		count[0]++;
		return count;
	}

}
